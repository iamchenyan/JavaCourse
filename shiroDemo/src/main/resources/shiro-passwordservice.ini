[main]

passwordService=org.apache.shiro.authc.credential.DefaultPasswordService
hashService=org.apache.shiro.crypto.hash.DefaultHashService
passwordService.hashService=$hashService
hashFormat=org.apache.shiro.crypto.hash.format.Shiro1CryptFormat
passwordService.hashFormat=$hashFormat
hashFormatFactory=org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory
passwordService.hashFormatFactory=$hashFormatFactory

passwordMatcher=org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService=$passwordService

myRealm=realm.RealmTest4
myRealm.passwordService=$passwordService
myRealm.credentialsMatcher=$passwordMatcher
securityManager.realms=$myRealm

#1. passwordService 使用 DefaultPasswordService，可以自定义
#2. hashService 定义散列密码使用的 HashService，默认使用 DefaultHashService（默认 SHA-256算法）
#3. hashFormat 将散列的值进行格式化，默认使用 Shiro1CryptFormat，另外提供 Base64Format、HexFormat，
#		对于有 salt的密码自定义实现 ParsableHashFormat 然后将 salt格式到散列值中
#4. hashFormatFactory 根据散列值得到 散列的密码 和 salt；如果使用  SHA算法，会生成一个 slat，
#		此 salt 需要保存到散列后的值中以便之后与传入的密码比较时使用；默认使用 DefaultHashFormatFactory；
#5. passwordMatcher 使用 PasswordMatcher，其中一个 CredentialsMatcher
#6. 将 passwordMatcher 赋值给 myRealm，myRealm 间接继承了 AuthenticatingRealm，其在调用 getAuthenticationInfo 方法
#		获取到 AuthenticationInfo 信息，会使用 credentialsMatcher 来验证凭据是否匹配，不匹配抛出 IncorrectCredentialsException
